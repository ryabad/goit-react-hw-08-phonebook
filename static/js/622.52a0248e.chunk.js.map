{"version":3,"file":"static/js/622.52a0248e.chunk.js","mappings":"kNAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,KAAKA,IAAK,EAC1CC,EAAkB,SAAAF,GAAK,OAAIA,EAAMC,KAAKE,SAAU,EAChDC,EAAc,SAAAJ,GAAK,OAAIA,EAAMC,KAAKI,KAAM,E,SCiBjDC,EAAS,WAGX,IAH0B,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfG,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWR,IAC3CA,KAAQ,CACb,IAAIS,EAAqB,GAAdJ,EAAML,GAEfI,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAEV,CACA,OAAOL,CACT,E,iDCnCaQ,EAAY,SAAAC,GAIvB,OAHgB,IAAIC,OAAO,0HAGZC,KAAKF,EACtB,EAEaG,EAAa,SAAAH,GAGxB,MADE,2EACaE,KAAKF,EACtB,E,SCyFA,EAzFoB,WAClB,IAAMI,GAAWC,EAAAA,EAAAA,IAAY1B,GAEvB2B,GAAWC,EAAAA,EAAAA,MAkCjB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,UAAU,OACVC,SAtBiB,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACTC,EAAU,CACdC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,OAAQN,EAAKI,SAASG,MAAMF,QAGA,IAA5BpB,EAAUiB,EAAQC,QACa,IAA/Bd,EAAWa,EAAQI,UAtBD,SAAAJ,GAEpB,GADgBZ,EAASkB,MAAK,SAAAC,GAAE,OAAIA,EAAGN,OAASD,EAAQC,IAAI,IAE1DO,IAAAA,OAAAA,QAAwB,GAADC,OAAIT,EAAQC,KAAI,gCADzC,CAIA,IAAMS,GAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXX,GAAO,IACVzB,GAAIL,MAENoB,GAASsB,EAAAA,EAAAA,IAAgBF,GALzB,CAMF,CAiBEG,CAAcb,GACdF,EAAKgB,SALHN,IAAAA,OAAAA,QAAwB,uCAM5B,EAMIO,YAAU,EACVC,aAAa,MACbC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,IAAK,QACLC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,UAAQ,EACRT,GAAI,CACFU,gBAAiB,QACjBC,aAAc,QAEhB3B,KAAK,OACL4B,KAAK,OACLC,MAAM,aACNvD,GAAG,YACHwD,QAAQ,SACRC,WAAY,CACVC,UAAW,OAGfT,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,UAAQ,EACRT,GAAI,CACFU,gBAAiB,QACjBC,aAAc,QAEhB3B,KAAK,QACL4B,KAAK,MACLtD,GAAG,aACHuD,MAAM,cACNC,QAAQ,SACRC,WAAY,CACVC,UAAW,OAIfT,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAACL,KAAK,SAASE,QAAQ,YAAWR,SAAC,kBAKhD,E,8BClGaY,EAAe,SAAAvE,GAAK,OAAIA,EAAMwE,OAAOA,MAAO,ECI5CC,GAAsBC,EAAAA,EAAAA,IACjC,CAACH,EAAcxE,IACf,SAAC4E,EAAenD,GACd,GAAqB,KAAjB+C,EAAJ,CAGA,IAAMC,EAASG,EAAcC,OAAOC,cAIpC,OAHgBrD,EAASgD,QAAO,SAAAM,GAAK,OACnCA,EAAMzC,KAAKuC,OAAOC,cAAcE,SAASP,EAAO,GAHlD,CAMF,ICdF,EAA6D,+BAA7D,EAAoG,2BAApG,EAAsI,0BAAtI,EAA4K,+BAA5K,EAAoN,4BCApN,EAA0B,uBAA1B,EAAyD,qBCyGzD,EAjGc,SAAHQ,GAA4B,IAAtBC,EAAKD,EAALC,MAAO7C,EAAO4C,EAAP5C,QAChBV,GAAWC,EAAAA,EAAAA,MAqBXuD,EAAgB,SAAAC,GACpBzD,GAAS0D,EAAAA,EAAAA,IAAmBD,GAC9B,EAqBA,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,SAAAtD,GACD,WAAXA,EAAEuD,MACJN,GAEJ,EAGA,OAFAO,SAASC,iBAAiB,UAAWH,GAE9B,WACLE,SAASE,oBAAoB,UAAWJ,EAC1C,CACF,GAAG,CAACL,KAGFrB,EAAAA,EAAAA,KAAA,OAAK+B,UAAWC,EAAaC,QApBX,SAAA7D,GACdA,EAAEG,SAAWH,EAAE8D,eACjBb,GAEJ,EAgBoDtB,UAChDC,EAAAA,EAAAA,KAAA,OAAK+B,UAAWC,EAAUjC,UACxB/B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,UAAU,OACVqB,YAAU,EACVC,aAAa,MACbrB,SAjDa,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACT4D,EAAiB,CACrB1D,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,OAAQN,EAAKI,SAASG,MAAMF,MAC5B5B,GAAIyB,EAAQzB,KAGsB,IAAlCQ,EAAU+D,EAAc7C,QACc,IAAtCd,EAAWwE,EAAevD,SAK5B0C,EAAca,GACdd,KAJErC,IAAAA,OAAAA,QAAwB,uCAK5B,EAiCQS,GAAI,CACFC,QAAS,OACTC,cAAe,SACfyC,MAAO,QACPxC,eAAgB,SAChBC,WAAY,SACZwC,OAAQ,SACRC,OAAQ,QAER,kBAAmB,CAAEC,EAAG,EAAGH,MAAO,SAClCrC,SAAA,EAEF/B,EAAAA,EAAAA,MAAA,OAAA+B,SAAA,EACE/B,EAAAA,EAAAA,MAAA,KAAA+B,SAAA,CAAG,aAAWvB,EAAQC,SACtBuB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRM,QAAQ,WACR9B,KAAK,OACL4B,KAAK,OACLC,MAAM,OACNE,WAAY,CACVC,UAAW,IAEbP,UAAQ,QAGZlC,EAAAA,EAAAA,MAAA,OAAA+B,SAAA,EACE/B,EAAAA,EAAAA,MAAA,KAAA+B,SAAA,CAAG,cAAYvB,EAAQI,WACvBoB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRxB,KAAK,QACL4B,KAAK,MACLtD,GAAG,aACHuD,MAAM,QACNJ,UAAQ,QAGZF,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAACL,KAAK,SAASE,QAAQ,YAAWR,SAAC,iBAOpD,EChBA,EA9EoB,WAClB,IAAMnC,GAAWC,EAAAA,EAAAA,IAAYgD,GACvBtE,GAAYsB,EAAAA,EAAAA,IAAYvB,GACxBG,GAAQoB,EAAAA,EAAAA,IAAYrB,GAG1BgG,GAAsCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAA8CL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAQpCG,EAAc,WAClBL,GAAe,EACjB,EAGM/E,GAAWC,EAAAA,EAAAA,MAUjB,OAJA0D,EAAAA,EAAAA,YAAU,WACR3D,GAASqF,EAAAA,EAAAA,MACX,GAAG,CAACrF,KAGFE,EAAAA,EAAAA,MAAAoF,EAAAA,SAAA,CAAArD,SAAA,CACGxD,IAAcE,IAASuD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAC1BnC,GAAYA,EAASf,OAAS,IAC7BmD,EAAAA,EAAAA,KAAA,OAAK+B,UAAWC,EAASjC,UACvB/B,EAAAA,EAAAA,MAAA,SAAO+D,UAAWC,EAAUjC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SAAAD,UACE/B,EAAAA,EAAAA,MAAA,MAAA+B,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGnC,EACEyF,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAExG,GAAKuG,EAAEvG,EAAE,IAC1ByG,KAAI,SAAAzE,GAAE,OACLf,EAAAA,EAAAA,MAAA,MAAgB+D,UAAWC,EAAWjC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKhB,EAAGN,QACRuB,EAAAA,EAAAA,KAAA,MAAAD,SAAKhB,EAAGH,UACRZ,EAAAA,EAAAA,MAAA,MAAI+D,UAAWC,EAAcjC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UACEK,KAAK,SACL4B,QAAS,kBA5CZ,SAAAlF,GACjB,IAAMiG,EAAkBpF,EAAS6F,MAAK,SAAA1E,GAAE,OAAIA,EAAGhC,KAAOA,CAAE,IACxDkG,EAAmBD,GACnBH,GAAe,EACjB,CAwCqCa,CAAW3E,EAAGhC,GAAG,EAChCgF,UAAWC,EAAcjC,SAC1B,UAGDC,EAAAA,EAAAA,KAAA,UACEiC,QAAS,kBArCPlF,EAqC6BgC,EAAGhC,QApCtDe,GAAS6F,EAAAA,EAAAA,IAAmB5G,IADN,IAAAA,CAqCmC,EACrCgF,UAAWC,EAAcjC,SAC1B,WAGA6C,IACC5C,EAAAA,EAAAA,KAAC4D,EAAK,CAACvC,MAAO6B,EAAa1E,QAASwE,SAlBjCjE,EAAGhC,GAqBP,aAQvB,E,SCrFA,EAAyB,uBCgCzB,EA1Be,WACb,IAAM6D,GAAS/C,EAAAA,EAAAA,IAAY8C,GACrB7C,GAAWC,EAAAA,EAAAA,MAKjB,OACEiC,EAAAA,EAAAA,KAAA,OAAK+B,UAAWC,EAAWjC,UACzBC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRR,GAAI,CACFU,gBAAiB,QACjBC,aAAc,QAEhB3B,KAAK,SACL4B,KAAK,OACLtD,GAAG,gBACH4B,MAAOiC,EACPiD,SAde,SAAAzF,GACnBN,GAASgG,EAAAA,EAAAA,IAAa1F,EAAEG,OAAOI,OACjC,EAaM2B,MAAM,kBACNC,QAAQ,YAIhB,EC9BA,EAAwB,wBAAxB,EAAwD,wBC2BxD,EAlBiB,WACf,IAAMzC,GAAWC,EAAAA,EAAAA,MACXxB,GAAYsB,EAAAA,EAAAA,IAAYvB,GAK9B,OAHAmF,EAAAA,EAAAA,YAAU,WACR3D,GAASqF,EAAAA,EAAAA,MACX,GAAG,CAACrF,KAEFE,EAAAA,EAAAA,MAAA,OAAK+D,UAAWC,EAAUjC,SAAA,CACvBxD,IAAayD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBACjBC,EAAAA,EAAAA,KAAA,MAAI+B,UAAWC,EAAUjC,SAAC,cAC1BC,EAAAA,EAAAA,KAAC+D,EAAW,KACZ/D,EAAAA,EAAAA,KAACgE,EAAM,KACPhE,EAAAA,EAAAA,KAACiE,EAAW,MAGlB,C","sources":["store/user/selectors.js","../node_modules/nanoid/index.browser.js","common/regExpCheck.js","components/ContactForm/ContactForm.js","store/filter/selectors.js","store/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.js","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.user.user;\nexport const selectIsLoading = state => state.user.isLoading;\nexport const selectError = state => state.user.error;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const checkName = input => {\n  const pattern = new RegExp(\n    `^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$`\n  );\n  return pattern.test(input);\n};\n\nexport const checkPhone = input => {\n  const pattern =\n    /^\\+?\\d{1,9}?[ .\\s]?(?:\\d{5,})?[ .\\s]?\\d{1,4}[ .\\s]?\\d{1,4}[ .\\s]?\\d{1,9}/;\n  return pattern.test(input);\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'store/user/selectors';\nimport { addContactThunk } from 'store/user/userService';\n\nimport { nanoid } from 'nanoid';\n\nimport Notiflix from 'notiflix';\n\nimport { Box, Button, TextField } from '@mui/material';\nimport { checkName, checkPhone } from 'common/regExpCheck';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const addingContact = contact => {\n    const isExist = contacts.some(el => el.name === contact.name);\n    if (isExist) {\n      Notiflix.Notify.failure(`${contact.name} is already in contacts`);\n      return;\n    }\n    const newContact = {\n      ...contact,\n      id: nanoid(),\n    };\n    dispatch(addContactThunk(newContact));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const contact = {\n      name: form.elements.name.value,\n      number: form.elements.phone.value,\n    };\n    if (\n      checkName(contact.name) === false ||\n      checkPhone(contact.number) === false\n    ) {\n      Notiflix.Notify.warning('Input fields did not pass validation');\n      return;\n    }\n\n    addingContact(contact);\n    form.reset();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit}\n      noValidate\n      autoComplete=\"off\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '15px',\n      }}\n    >\n      <TextField\n        required\n        sx={{\n          backgroundColor: 'white',\n          borderRadius: '10px',\n        }}\n        name=\"name\"\n        type=\"text\"\n        label=\"Input Name\"\n        id=\"inputName\"\n        variant=\"filled\"\n        inputProps={{\n          maxLength: 20,\n        }}\n      />\n      <TextField\n        required\n        sx={{\n          backgroundColor: 'white',\n          borderRadius: '10px',\n        }}\n        name=\"phone\"\n        type=\"tel\"\n        id=\"inputPhone\"\n        label=\"Input Phone\"\n        variant=\"filled\"\n        inputProps={{\n          maxLength: 15,\n        }}\n      />\n\n      <Button type=\"submit\" variant=\"contained\">\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","export const selectFilter = state => state.filter.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from './filter/selectors';\nimport { selectContacts } from './user/selectors';\n\nexport const selectFilteredUSers = createSelector(\n  [selectFilter, selectContacts],\n  (inputedFilter, contacts) => {\n    if (selectFilter === '') {\n      return;\n    }\n    const filter = inputedFilter.trim().toLowerCase();\n    const contact = contacts.filter(users =>\n      users.name.trim().toLowerCase().includes(filter)\n    );\n    return contact;\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"deleteBtn\":\"ContactList_deleteBtn__1dg25\",\"table\":\"ContactList_table__GN5S1\",\"wrap\":\"ContactList_wrap__paQKq\",\"tdButtons\":\"ContactList_tdButtons__YNnXF\",\"trList\":\"ContactList_trList__AW76Q\"};","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__r63M6\",\"modal\":\"Modal_modal__DJDMv\"};","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeContactThunk } from 'store/user/userService';\nimport { checkName, checkPhone } from 'common/regExpCheck';\nimport Notiflix from 'notiflix';\n\nimport { Box, Button, TextField } from '@mui/material';\nimport css from './Modal.module.css';\n\nconst Modal = ({ close, contact }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const changedContact = {\n      name: form.elements.name.value,\n      number: form.elements.phone.value,\n      id: contact.id,\n    };\n    if (\n      checkName(changeContact.name) === false ||\n      checkPhone(changedContact.number) === false\n    ) {\n      Notiflix.Notify.warning('Input fields did not pass validation');\n      return;\n    }\n    changeContact(changedContact);\n    close();\n  };\n\n  const changeContact = data => {\n    dispatch(changeContactThunk(data));\n  };\n\n  const handleClick = e => {\n    if (e.target === e.currentTarget) {\n      close();\n    }\n  };\n\n  useEffect(() => {\n    const handleESC = e => {\n      if (e.code === 'Escape') {\n        close();\n      }\n    };\n    document.addEventListener('keydown', handleESC);\n\n    return () => {\n      document.removeEventListener('keydown', handleESC);\n    };\n  }, [close]);\n\n  return (\n    <div className={css.overlay} onClick={handleClick}>\n      <div className={css.modal}>\n        <Box\n          component=\"form\"\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit}\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            width: '400px',\n            justifyContent: 'center',\n            alignItems: 'center',\n            margin: '0 auto',\n            height: '300px',\n\n            '& > :not(style)': { m: 1, width: '25ch' },\n          }}\n        >\n          <div>\n            <p>Old name: {contact.name}</p>\n            <TextField\n              variant=\"outlined\"\n              name=\"name\"\n              type=\"text\"\n              label=\"Name\"\n              inputProps={{\n                maxLength: 15,\n              }}\n              required\n            />\n          </div>\n          <div>\n            <p>old phone: {contact.number}</p>\n            <TextField\n              name=\"phone\"\n              type=\"tel\"\n              id=\"inputPhone\"\n              label=\"Phone\"\n              required\n            />\n          </div>\n          <Button type=\"submit\" variant=\"contained\">\n            Change\n          </Button>\n        </Box>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\n\nimport { deleteContactThunk, fetchContactThunk } from 'store/user/userService';\nimport { selectError, selectIsLoading } from 'store/user/selectors';\nimport { selectFilteredUSers } from 'store/selectors';\n\nimport css from './ContactList.module.css';\nimport Modal from 'components/Modal/Modal';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredUSers);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  //-------------------Modal----------------------\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [selectedContact, setSelectedContact] = useState(null);\n\n  const handleOpen = id => {\n    const selectedContact = contacts.find(el => el.id === id);\n    setSelectedContact(selectedContact);\n    setIsShowModal(true);\n  };\n\n  const handleClose = () => {\n    setIsShowModal(false);\n  };\n  //----------------------------------------------\n\n  const dispatch = useDispatch();\n\n  const deletingContact = id => {\n    dispatch(deleteContactThunk(id));\n  };\n\n  useEffect(() => {\n    dispatch(fetchContactThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && !error && <p>Loading...</p>}\n      {contacts && contacts.length > 0 && (\n        <div className={css.wrap}>\n          <table className={css.table}>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Phone</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contacts\n                .sort((a, b) => b.id - a.id)\n                .map(el => (\n                  <tr key={el.id} className={css.trList}>\n                    <td>{el.name}</td>\n                    <td>{el.number}</td>\n                    <td className={css.tdButtons}>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleOpen(el.id)}\n                        className={css.deleteBtn}\n                      >\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => deletingContact(el.id)}\n                        className={css.deleteBtn}\n                      >\n                        Delete\n                      </button>\n                      {isShowModal && (\n                        <Modal close={handleClose} contact={selectedContact} />\n                      )}\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterAction } from 'store/filter/filterSlice';\nimport { selectFilter } from 'store/filter/selectors';\n\nimport { TextField } from '@mui/material';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(filterAction(e.target.value));\n  };\n  return (\n    <div className={css.filter}>\n      <TextField\n        sx={{\n          backgroundColor: 'white',\n          borderRadius: '10px',\n        }}\n        name=\"filter\"\n        type=\"text\"\n        id=\"filterContact\"\n        value={filter}\n        onChange={handleFilter}\n        label=\"Contacts filter\"\n        variant=\"filled\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"Contacts_block__ILOhZ\",\"title\":\"Contacts_title__LxdN4\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'store/user/selectors';\nimport { fetchContactThunk } from 'store/user/userService';\n\nimport css from './Contacts.module.css';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContactThunk());\n  }, [dispatch]);\n  return (\n    <div className={css.block}>\n      {isLoading && <p>Loading...</p>}\n      <h2 className={css.title}>Contacts</h2>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","user","selectIsLoading","isLoading","selectError","error","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","checkName","input","RegExp","test","checkPhone","contacts","useSelector","dispatch","useDispatch","_jsxs","Box","component","onSubmit","e","preventDefault","form","target","contact","name","elements","value","number","phone","some","el","Notiflix","concat","newContact","_objectSpread","addContactThunk","addingContact","reset","noValidate","autoComplete","sx","display","flexDirection","justifyContent","alignItems","gap","children","_jsx","TextField","required","backgroundColor","borderRadius","type","label","variant","inputProps","maxLength","Button","selectFilter","filter","selectFilteredUSers","createSelector","inputedFilter","trim","toLowerCase","users","includes","_ref","close","changeContact","data","changeContactThunk","useEffect","handleESC","code","document","addEventListener","removeEventListener","className","css","onClick","currentTarget","changedContact","width","margin","height","m","_useState","useState","_useState2","_slicedToArray","isShowModal","setIsShowModal","_useState3","_useState4","selectedContact","setSelectedContact","handleClose","fetchContactThunk","_Fragment","sort","a","b","map","find","handleOpen","deleteContactThunk","Modal","onChange","filterAction","ContactForm","Filter","ContactList"],"sourceRoot":""}